{
    "contents" : "### Lyas script\n### 2015-04-07\n### 3. Decomposition\n\n#####################################\n# Load required packages            #\n#####################################\n#library(FinancialInstrument)\nlibrary(TTR)\n#library(PerformanceAnalytics)\n#library(quantmod)\n\n#####################################\n# CONSTANT                          #\n#####################################\n# Must be load file\n#bLoadFile <- TRUE\n\n\n#####################################\n# Initialize                        #\n#####################################\n# Remove objects from workspace\nlist <- c(\"list\", \"exceptVar\", ls())\nexceptVar = c(\"\")\nrm(list=(list[!list %in% exceptVar]))\n\n# Path for save Result Files\nPathResult = \"Result\"\ndir.create(PathResult, showWarnings = FALSE, recursive = FALSE, mode = \"0777\")\nPathResult <- paste0(PathResult, \"/\")\n\n#####################################\n# Functions                         #\n#####################################\n\nFixed_month <- function (inp) {\n  # FIXED Month File\n  # All days set to last day of Month (2015-01-29 -> 2015-01-31)\n  inp_conv <- inp\n  inp_new <- matrix(nrow=0, ncol=ncol(inp_conv))\n  for (y in seq(2,nrow(inp_conv))) {\n    if (.indexmon(inp_conv[y-1,])== .indexmon(inp_conv[y,])) {\n      for (idx in seq(ncol(inp_conv[y-1]))) {\n        if (!is.na(inp_conv[y-1, idx]))\n          inp_conv[y,idx] = inp_conv[y-1, idx]\n      }\n    } else\n      inp_new <- rbind(inp_new, as.matrix(inp_conv[y-1,]))\n    if (y==nrow(inp_conv))\n      inp_new <- rbind(inp_new, as.matrix(inp_conv[y,]))\n  }\n  return(as.xts(inp_new))\n}\n\nFixed_year <- function (inp) {\n  # FIXED Year File\n  inp_conv <- inp\n  inp_new <- matrix(nrow=0, ncol=ncol(inp_conv))\n  for (y in seq(2,nrow(inp_conv))) {\n    if ((.indexyear(inp_conv[y-1,])== .indexyear(inp_conv[y,])) && \n          (.indexmon(inp_conv[y-1,])== .indexmon(inp_conv[y,]))) {\n      for (idx in seq(ncol(inp_conv[y-1]))) {\n        if (!is.na(inp_conv[y-1, idx]))\n          inp_conv[y,idx] = inp_conv[y-1, idx]\n      }\n    } else\n      inp_new <- rbind(inp_new, as.matrix(inp_conv[y-1,]))\n    if (y==nrow(inp_conv))\n      inp_new <- rbind(inp_new, as.matrix(inp_conv[y,]))\n  }\n  return(as.xts(inp_new))\n}\n\n# Load csv-file\nLoadData <- function(sfile, f_col=3, f_dec=\".\", FixM=FALSE, FixY=FALSE){\n  # Load data from csv-file and return xts object\n  # \n  # args:\n  #  sfile = Path to file \"input.csv\" (string)\n  #  f_col = Count cols per one PX (number)\n  #  f_dec = Character of float (character)\n  #  FixM = Fixed Month (boolean)\n  #  FixY = Fixed Year (boolean)\n  #\n  # Returns:\n  #  returns an xts object\n  print(paste0(\"LOAD File: \",sfile,\", Time: \",Sys.time()))\n  sf <- read.csv(file=sfile, sep=\";\", header=FALSE)\n  t_count <- ceiling(ncol(sf) / f_col)\n  rd <- data.frame(matrix(ncol=1,nrow=0))\n  names(rd)[1] <- \"Date\"\n  # ONLY for FAST Algorithm\n  fast_koef <-125\n  rd_count <- ceiling(t_count/fast_koef)\n  rd.list <- list()\n  rd_idx <- 0\n  rd_idx_temp <- 0\n  \n  for (i in seq(t_count)) {\n    if (ncol(sf)>=(i-1)*f_col+2) {\n      rt1 <- sf[3:nrow(sf),c((i-1)*f_col+1,(i-1)*f_col+2)]\n      rt1 <- rt1[!(factor(rt1[,1]) %in% \"\"),]\n      names(rt1) <- c(as.character(sf[2,(i-1)*f_col+1]),as.character(sf[1,(i-1)*f_col+1]))\n      if (is.na(as.Date(as.character(rt1[1,1]), format=\"%d.%m.%Y\"))) {\n        rt1$Date <- as.Date(as.numeric(as.character(rt1$Date)), origin=\"1899-12-30\")\n      } else {\n        rt1$Date <- as.Date(as.character(rt1$Date), format=\"%d.%m.%Y\")\n      }\n      #     rd <- merge(rt1, rd, by=\"Date\", all=TRUE)\n      \n      if ((rd_idx==0) | (rd_idx_temp==fast_koef)) {\n        rd_idx <- rd_idx+1\n        rd_idx_temp <- 0\n        rd.list[[rd_idx]] <- data.frame(matrix(ncol=1,nrow=0))\n        names(rd.list[[rd_idx]])[1] <- \"Date\"\n      }\n      rd_idx_temp <- rd_idx_temp+1\n      rd.list[[rd_idx]] <- merge(rt1, rd.list[[rd_idx]], by=\"Date\", all=TRUE)\n    }\n  }\n  for (i in seq(rd_count))\n    rd <- merge(rd.list[[i]], rd, by=\"Date\", all=TRUE)\n  rd <- rd[seq(length(na.omit(rd[,1]))),]\n  \n  t_m <- as.matrix(rd[,2:ncol(rd)])\n#  print(t_m)\n  rownames(t_m) <- format.Date(as.character(rd[,1]))\n  t_m <- type.convert(t_m, dec=f_dec)\n  t_m <- as.xts(t_m)\n  if (FixM)\n    t_m <- Fixed_month(t_m)\n  if (FixY)\n    t_m <- Fixed_year(t_m)\n  return(t_m)\n}\n\ngetPortfolioDecomposition <- function(ret_stake, monthly.ret, n_period, m_invest, skip_month=0, portf_name = \"Portf\"){\n  # Get Portfolio By Decomposition\n  # \n  # args:\n  #  ret_stake = Stake (xts)\n  #  monthly.ret = Monthly Returns (xts)\n  #  n_period = N-Period (number)\n  #  m_invest = Period of investition (number)\n  #  skip_month = Count of month on skip (number)\n  #  portf_name = Name of column of portfolio\n  #\n  # Returns:\n  #  returns an xts object of Portfolio\n  if (nrow(ret_stake)-m_invest-skip_month>=1) {\n    # Setup temp portfolio\n    tmp_portfolio <- lag(ret_stake[,1], k=m_invest+skip_month, na.pad=FALSE)\n    tmp_portfolio <- apply.daily( tmp_portfolio, function(x) NA)\n    names(tmp_portfolio) <- paste0(portf_name, \" n\", n_period, \" m\", m_invest)\n    \n    for (m_idx in seq(1,nrow(ret_stake)-m_invest-skip_month)) {\n      # Check out of Bounds\n      if ((m_idx+m_invest+skip_month)<=nrow(ret_stake)) {\n        tmp <- mean(\n          # Summ by Row\n          apply(\n            # Every Row multiply by Monthly Return\n            apply.daily( ret_stake[m_idx:(m_idx+m_invest-1),],\n                         function(x) x*as.vector( monthly.ret[index(ret_stake[(m_idx+m_invest+skip_month),])]) ),\n            1, sum)\n        )\n        # Set in tmp_portfolio\n        tmp_portfolio[index(ret_stake[(m_idx+m_invest+skip_month),])] <- tmp\n      }\n    }\n    # Add in portfolio\n    returns[[n_period]]$portfolio <- merge(returns[[n_period]]$portfolio, tmp_portfolio)\n    return(tmp_portfolio)\n  } else\n    return(NULL)\n}\n  \n\n\n#####################################\n# Start program                     #\n#####################################\n\n#sfile <- 'px_short_1.csv'\n#input_px <- LoadData(sfile,3,\",\", TRUE)\nsfile <- 'final.csv'\ninput_px <- LoadData(sfile,3,\".\", TRUE)\n\n# LIMITS\n#input_px <- input_px['2007-01/2008-01']\n#input_px <- input_px[, seq(ncol(input_px)-3, ncol(input_px))]\n\n# Calculate Montly Returns\nmonthly.returns <- ROC(x = input_px, n = 1, type = \"discrete\", na.pad = TRUE)\n\n# 1. Calculate Average(Mean), Median, Standar Deviation of Monthly Returns\nmonthly.returns.mean <- apply(monthly.returns, 2, mean, na.rm=TRUE)\nmonthly.returns.median <- apply(monthly.returns, 2, median, na.rm=TRUE)\nmonthly.returns.sd <- apply(monthly.returns, 2, sd, na.rm=TRUE)\n\n# SAVE Monthly returns\nf_AR <- matrix(nrow=nrow(monthly.returns), ncol=0)\nf_AR <- cbind(f_AR, t(t(monthly.returns)))\nf_AR <- rbind(f_AR, monthly.returns.mean)\nf_AR <- rbind(f_AR, monthly.returns.median)\nf_AR <- rbind(f_AR, monthly.returns.sd)\nwrite.csv2(f_AR, file=paste0(PathResult, \"Monthly_returns.csv\"))\n\n# 2. Calculate Returns by n-period (n=1,3,6,9,12)\nreturns <- list()\n# seq(3, 12, 3)\nfor (n_period in c(1:12)) {\n  print(paste0(\"Calculate N-Period=\", n_period))\n  returns[[n_period]] <- list()\n  returns[[n_period]]$ret <- ROC(x = input_px, n = n_period, type = \"discrete\", na.pad = TRUE)\n  returns[[n_period]]$meanByMonth <- apply(returns[[n_period]]$ret, 1, mean, na.rm=TRUE)\n  returns[[n_period]]$xtsmeanByMonth <- as.xts(returns[[n_period]]$meanByMonth)\n  \n  # 3. Calculate Stake\n  #  returns[[n_period]]$stake <- (returns[[n_period]]$ret-returns[[n_period]]$meanByMonth)/ncol(returns[[n_period]]$ret)\n  returns[[n_period]]$countpx <- returns[[n_period]]$ret\n  returns[[n_period]]$countpx[!is.na(returns[[n_period]]$countpx)] <- 1\n  returns[[n_period]]$countpx <- apply(returns[[n_period]]$countpx, 1, sum, na.rm=TRUE)\n  returns[[n_period]]$countpx[returns[[n_period]]$countpx<=0] <- NA\n  # 3. Calculate Stake\n  returns[[n_period]]$stake <- (returns[[n_period]]$ret-returns[[n_period]]$meanByMonth) / returns[[n_period]]$countpx\n\n  # 3.2. Calculate Stake With Koefficient\n  returns[[n_period]]$stakeKoef1 <- returns[[n_period]]$stake * (returns[[n_period]]$stake > 0)\n  returns[[n_period]]$stakeKoef2 <- 1/apply(returns[[n_period]]$stakeKoef1, 1, sum, na.rm=TRUE)\n  returns[[n_period]]$stake2 <- returns[[n_period]]$stake * returns[[n_period]]$stakeKoef2\n    \n  # SAVE Stake1\n  f_AR <- matrix(nrow=nrow(returns[[n_period]]$stake), ncol=0)\n  f_AR <- cbind(f_AR, t(t(returns[[n_period]]$stake)))\n  f_AR <- cbind(f_AR, \"Count\" = returns[[n_period]]$countpx)\n  write.csv2(f_AR, file=paste0(PathResult, \"Stake1_n\",n_period,\".csv\"))\n\n  # SAVE Stake2\n  f_AR <- matrix(nrow=nrow(returns[[n_period]]$stake2), ncol=0)\n  f_AR <- cbind(f_AR, \"Koef\"= returns[[n_period]]$stakeKoef2)\n  f_AR <- cbind(f_AR, t(t(returns[[n_period]]$stake2)))\n  write.csv2(f_AR, file=paste0(PathResult, \"Stake2_n\",n_period,\".csv\"))\n  \n  # SAVE N-Returns\n  f_AR <- matrix(nrow=nrow(returns[[n_period]]$ret), ncol=0)\n  f_AR <- cbind(f_AR, t(t(returns[[n_period]]$ret)))\n  f_AR <- cbind(f_AR, \"Rm\" = returns[[n_period]]$meanByMonth)\n  write.csv2(f_AR, file=paste0(PathResult, \"Returns_n\", n_period, \".csv\"))\n  \n  for (m_period in c(1:12)) {\n    print(paste0(\"M-Period=\", m_period))\n    returns[[n_period]]$Mret <- ROC(x = input_px, n = m_period, type = \"discrete\", na.pad = TRUE)\n    \n    for (i in c(1:ncol(returns[[n_period]]$ret))) {\n      returns[[n_period]]$Mret[,i][is.na(lag(returns[[n_period]]$ret[,i], k=m_period))] <- NA\n    }\n    \n    returns[[n_period]]$MmeanByMonth <- apply(returns[[n_period]]$Mret, 1, mean, na.rm=TRUE)\n    returns[[n_period]]$MxtsmeanByMonth <- as.xts(returns[[n_period]]$MmeanByMonth)\n    \n# 4. Calculate returns of Portfolio\n    if (nrow(returns[[n_period]]$stake)>0) {\n      if (nrow(returns[[n_period]]$stake)>m_period) {\n        returns[[n_period]]$Portf1 <- apply.daily(lag(returns[[n_period]]$stake2, k=m_period)*returns[[n_period]]$Mret, sum, na.rm = TRUE)\n\n# 5. Part \n        returns[[n_period]]$A5parRm <- lag(returns[[n_period]]$xtsmeanByMonth, k=m_period)*\n                                      returns[[n_period]]$MxtsmeanByMonth\n        returns[[n_period]]$A5PartTicket <- (lag(returns[[n_period]]$ret, k=m_period)*returns[[n_period]]$Mret)-\n                                  (lag(returns[[n_period]]$ret, k=m_period)^2)\n        returns[[n_period]]$A5SumPartTicket <- apply.daily(returns[[n_period]]$A5PartTicket, sum, na.rm = TRUE)\n#        returns[[n_period]]$A5Count <- ncol(returns[[n_period]]$A5PartTicket)\n\n        returns[[n_period]]$A5Count <- returns[[n_period]]$A5PartTicket\n        returns[[n_period]]$A5Count[!is.na(returns[[n_period]]$A5Count)] <- 1\n        returns[[n_period]]$A5Count <- apply(returns[[n_period]]$A5Count, 1, sum, na.rm=TRUE)\n        returns[[n_period]]$A5Count[returns[[n_period]]$A5Count<=0] <- NA\n\n        returns[[n_period]]$A5parC <- (returns[[n_period]]$A5parRm - \n                                  (lag(returns[[n_period]]$xtsmeanByMonth, k=m_period)^2) - \n                                  (returns[[n_period]]$A5SumPartTicket/(returns[[n_period]]$A5Count^2))) *\n                                  lag(as.xts(returns[[n_period]]$stakeKoef2), k=m_period)\n        returns[[n_period]]$A5parO <- returns[[n_period]]$A5SumPartTicket *\n                                      (returns[[n_period]]$A5Count-1) /\n                                      (returns[[n_period]]$A5Count^2) *\n                                      lag(as.xts(returns[[n_period]]$stakeKoef2), k=m_period)\n        returns[[n_period]]$A5parS <- as.xts((returns[[n_period]]$A5Count-1) / returns[[n_period]]$A5Count *\n                                      apply(lag(returns[[n_period]]$ret, k=m_period), 1, var, na.rm= TRUE)) *\n                                      lag(as.xts(returns[[n_period]]$stakeKoef2), k=m_period)\n        returns[[n_period]]$Portf2 <- returns[[n_period]]$A5parS + returns[[n_period]]$A5parO - returns[[n_period]]$A5parC\n        returns[[n_period]]$PortfMean2 <- mean(returns[[n_period]]$Portf2, na.rm=TRUE)\n        returns[[n_period]]$PortfSD2 <- sd(returns[[n_period]]$Portf2, na.rm=TRUE)\n        nc <- nrow(na.omit(as.matrix(returns[[n_period]]$Portf2)))\n        returns[[n_period]]$PortfZStat2 <- returns[[n_period]]$PortfMean2 / returns[[n_period]]$PortfSD2 / (nc^0.5)\n\n    # Remove rows with NA\n#      returns[[n_period]]$A5PartTicket <- na.omit(returns[[n_period]]$A5PartTicket)\n#      returns[[n_period]]$A5parRm <- na.omit(returns[[n_period]]$A5parRm[index(returns[[n_period]]$A5PartTicket)])\n#      returns[[n_period]]$A5parC <- na.omit(returns[[n_period]]$A5parC[index(returns[[n_period]]$A5PartTicket)])\n#      returns[[n_period]]$A5parO <- na.omit(returns[[n_period]]$A5parO[index(returns[[n_period]]$A5PartTicket)])\n#      returns[[n_period]]$A5parS <- na.omit(returns[[n_period]]$A5parS[index(returns[[n_period]]$A5PartTicket)])\n#      returns[[n_period]]$Portf2 <- na.omit(returns[[n_period]]$Portf2[index(returns[[n_period]]$A5PartTicket)])\n      # Set Names by Parameters\n        names(returns[[n_period]]$A5parRm) <- c(\"AR1\")\n        names(returns[[n_period]]$A5parC) <- c(\"C\")\n        names(returns[[n_period]]$A5parO) <- c(\"O\")\n        names(returns[[n_period]]$A5parS) <- c(\"S\")\n        names(returns[[n_period]]$Portf1) <- c(\"P1\")\n        names(returns[[n_period]]$Portf2) <- c(\"P2\")\n#        names(returns[[n_period]]$PortfMean2) <- c(\"mean\")\n#        names(returns[[n_period]]$PortfSD2) <- c(\"sd\")\n#        names(returns[[n_period]]$PortfZStat2) <- c(\"zstat\")\n\n# SAVE Portfolio\n        if (!is.null(nrow(returns[[n_period]]$A5PartTicket))) {\n          f_AR <- matrix(nrow=nrow(returns[[n_period]]$A5PartTicket), ncol=0)\n          f_AR <- cbind(f_AR, t(t(returns[[n_period]]$A5PartTicket)))\n          f_AR <- cbind(f_AR, t(t(returns[[n_period]]$A5parRm)))\n          f_AR <- cbind(f_AR, t(t(returns[[n_period]]$A5parC)))\n          f_AR <- cbind(f_AR, t(t(returns[[n_period]]$A5parO)))\n          f_AR <- cbind(f_AR, t(t(returns[[n_period]]$A5parS)))\n          f_AR <- cbind(f_AR, t(t(returns[[n_period]]$Portf1)))\n          f_AR <- cbind(f_AR, t(t(returns[[n_period]]$Portf2)))\n          f_AR <- cbind(f_AR, \"mean\"=returns[[n_period]]$PortfMean2)\n          f_AR <- cbind(f_AR, \"sd\"=returns[[n_period]]$PortfSD2)\n          f_AR <- cbind(f_AR, \"zstat\"=returns[[n_period]]$PortfZStat2)\n          write.csv2(f_AR, file=paste0(PathResult, \"Portf_n\",n_period,\"_m\",m_period,\".csv\"))\n        }\n      }\n    }\n  }\n}\nprint(paste0(\"Finished script\"))\n",
    "created" : 1428426946048.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1498406706",
    "id" : "B75D4B21",
    "lastKnownWriteTime" : 1428439729,
    "path" : "D:/Works/R/Work/2015/3_Decomposition/3_Decomposition.R",
    "project_path" : "3_Decomposition.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}