5+5
#!/usr/bin/env Rscript
#Вычисляем лучшую стратегию для пятничных цен закрытия для разных стран
rm(list=ls())
setwd("c:/Users/Nazarov1-NF/home/04-fmlab.hse.ru/10-crs_effect/")
#source("R/reality_func2.R")
#RESULT_PATH <- "/home/nazarov/02-fmlab.hse.ru/07 - factor evaluation/results/"
#############################################################################
# Загрузка
#############################################################################
ret_data <- read.csv(file="data/data.csv", header=TRUE, sep=";", dec=",", stringsAsFactors = F)
myDataFrame <- lapply(ret_data, function(x) {iconv(x, to = "UTF8");iconv(x, to = "UTF8")})
ret_data <- as.data.frame(myDataFrame)
myDataFrame <- lapply(ret_data, function(x) {iconv(x, to = "UTF8");iconv(x, to = "UTF8")})
ret_data <- as.data.frame(myDataFrame)
#!/usr/bin/env Rscript
#Вычисляем лучшую стратегию для пятничных цен закрытия для разных стран
rm(list=ls())
setwd("c:/Users/Nazarov1-NF/home/04-fmlab.hse.ru/10-crs_effect/")
#source("R/reality_func2.R")
#RESULT_PATH <- "/home/nazarov/02-fmlab.hse.ru/07 - factor evaluation/results/"
#############################################################################
# Загрузка
#############################################################################
ret_data <- read.csv(file="data/data.csv", header=TRUE, sep=";", dec=",", stringsAsFactors = F)
ret_result <- function(dat, indent, forc_step){
# dat -
dates <- dat[,1]
dat[,1] <- NULL
dat[is.na(dat)] <- 0
dat <- dat+1
df_ret <-data.frame(1,1)
for(i in 1 :(nrow(dat)-indent) ){
temp_row <- rep(1,ncol(dat))
for (k in 1:forc_step){
temp_row <- temp_row*as.numeric(dat[i+k,])
}
df_ret[i,1] <- dates[i]
df_ret[i,2] <-(mean(temp_row)-1)/mean(apply(dat[i:(i+forc_step),],2,sd))
}
return (df_ret)
}
indent <-31
forc_step <- 30
dat <- ret_data[-c(1,2,3), c(T, ret_data[1,]==1) ]
dat[,1] <- as.character(dat[,1])
ret_result (dat, indent, forc_step)
ret_result <- function(dat, indent, forc_step){
# dat -
dates <- dat[,1]
dat[,1] <- NULL
dat[is.na(dat)] <- 0
dat <- dat+1
df_ret <-data.frame(1,1)
for(i in 1 :(nrow(dat)-indent) ){
temp_row <- rep(1,ncol(dat))
for (k in 1:forc_step){
temp_row <- temp_row*as.numeric(dat[i+k,])
}
df_ret[i,1] <- dates[i]
df_ret[i,2] <-(mean(temp_row)-1)
df_ret[i,3] <-(mean(temp_row)-1)/mean(apply(dat[i:(i+forc_step),],2,sd))
}
return (df_ret)
}
indent <-31
forc_step <- 30
dat <- ret_data[-c(1,2,3), c(T, ret_data[1,]==1) ]
dat[,1] <- as.character(dat[,1])
ret_result (dat, indent, forc_step)
ret_result <- function(dat, indent, forc_step){
# dat -
dates <- dat[,1]
dat[,1] <- NULL
dat[is.na(dat)] <- 0
dat <- dat+1
df_ret <-data.frame(1,1)
for(i in 1 :(nrow(dat)-indent) ){
temp_row <- rep(1,ncol(dat))
for (k in 1:forc_step){
temp_row <- temp_row*as.numeric(dat[i+k,])
}
df_ret[i,1] <- dates[i]
df_ret[i,2] <-(mean(temp_row)-1)*100
df_ret[i,3] <-(mean(temp_row)-1)/mean(apply(dat[i:(i+forc_step),],2,sd))
}
return (df_ret)
}
indent <-31
forc_step <- 30
dat <- ret_data[-c(1,2,3), c(T, ret_data[1,]==1) ]
dat[,1] <- as.character(dat[,1])
ret_result (dat, indent, forc_step)
ret_result <- function(dat, indent, forc_step){
# dat - датафрейм с первым столбцом из дат и днемными доходностями
# indent - отступ от последней даты, зависит от максимального горизонта прогнозирования,
# который будет использоваться
# forc_step - сколько дней будем держать портфель
# Даты сохраняем в отдельный вектор
dates <- dat[,1]
dat[,1] <- NULL
# вместо пропусков пишем 0, потом меняем нули на 1
dat[is.na(dat)] <- 0
dat <- dat+1
# df_ret - результирующая таблица
df_ret <-data.frame(date=1, mean_return=1,stability_index=1)
for(i in 1 :(nrow(dat)-indent) ){
temp_row <- rep(1,ncol(dat))
for (k in 1:forc_step){
temp_row <- temp_row*as.numeric(dat[i+k,])
}
df_ret[i,1] <- dates[i]
df_ret[i,2] <-(mean(temp_row)-1)*100
df_ret[i,3] <-(mean(temp_row)-1)/mean(apply(dat[i:(i+forc_step),],2,sd))
}
return (df_ret)
}
indent <-31
forc_step <- 30
dat <- ret_data[-c(1,2,3), c(T, ret_data[1,]==1) ]
dat[,1] <- as.character(dat[,1])
ret_result (dat, indent, forc_step)
indent <-31
forc_step <- 30
dat <- ret_data[-c(1,2,3), c(T, ret_data[1,]==1) ]
dat[,1] <- as.character(dat[,1])
ret_result (dat, indent, forc_step)
ret_result <- function(dat, indent, forc_step){
# dat - датафрейм с первым столбцом из дат и днемными доходностями
# indent - отступ от последней даты, зависит от максимального горизонта прогнозирования,
# который будет использоваться
# forc_step - сколько дней будем держать портфель
# Даты сохраняем в отдельный вектор
dates <- dat[,1]
dat[,1] <- NULL
# вместо пропусков пишем 0, потом меняем нули на 1
dat[is.na(dat)] <- 0
dat <- dat+1
# df_ret - результирующая таблица
df_ret <-data.frame(date=1, mean_return=1,stability_index=1)
for(i in 1 :(nrow(dat)-indent) ){
temp_row <- rep(1,ncol(dat))
for (k in 1:forc_step){
temp_row <- temp_row*as.numeric(dat[i+k,])
}
df_ret[i,1] <- dates[i]
df_ret[i,2] <-(mean(temp_row)-1)*100
df_ret[i,3] <-(mean(temp_row)-1)/mean(apply(dat[i:(i+forc_step),],2,sd))
}
return (df_ret)
}
# Рассмотрим инвестирование на 1,2 и 3 месяца
# отступ положим равным 91 дню
# сранивать будем по среднему уровню стабильности
# потом возьмем с нужным горизонтом инвестирования портфель с худшими crs
dat <- ret_data[-c(1,2,3), c(T, ret_data[1,]==1) ]
dat[,1] <- as.character(dat[,1])
indent <-91
temp <- c()
for( j in 1:3){
forc_step <- 30*j
temp <- c(temp,mean(ret_result (dat, indent, forc_step)[,2]))
}
temp
order(df_ret[3,])
order(ret_data[3,])
View(ret_data)
order(ret_data[1,])
order(ret_data[1,-1])
rank(ret_data[1,-1])
order(ret_data[1,-1])
ret_data[,order(ret_data[1,-1])]
a <- ret_data[,order(ret_data[1,-1])]
View(a)
View(a)
min_crs <- ret_data[,order(ret_data[1,])]
View(min_crs)
min_crs <- ret_data
min_crs[1,1] <- -100
min_crs <- ret_data[,order(ret_data[1,])]
View(min_crs)
min_crs <- min_crs[,order(min_crs[1,])]
View(min_crs)
min_crs <- ret_data[,c(1,order(min_crs[1,])+1)]
min_crs <- ret_data[,c(1,order(ret_data[1,-1]+1))]
View(min_crs)
min_crs <- ret_data[,c(1,order(ret_data[1,-1]))]
View(min_crs)
min_crs <- ret_data
min_crs$date <- NULL
min_crs <- min_crs[,order(min_crs[1,])]
dat <- ret_data[-c(1,2,3), c(T, ret_data[1,]==1) ]
dat$date <- as.character(dat[,1])
dat[,1] <- NULL
min_crs <- ret_data[,order(ret_data[1,-1])]
View(min_crs)
min_crs <- ret_data[,order(ret_data[1,-1])]
View(min_crs)
min_crs <- ret_data[,-1]
min_crs <- min_crs[,order(in_crs[1,])]
min_crs <- min_crs[,order(min_crs[1,])]
View(min_crs)
dat <- ret_data[-c(1,2,3), c(T, ret_data[1,]==1) ]
dat$date <- as.character(dat[,1])
dat[,1] <- NULL
res_max <- ret_result(dat, 31, 30)
res_min <- ret_result(min_crs, 31, 30)
min_crs <- ret_data[,-1]
min_crs <- min_crs[,order(min_crs[1,])]
min_crs <- min_crs[,1:28]
min_crs$date <- dat$date
res_max <- ret_result(dat, 31, 30)
res_min <- ret_result(min_crs, 31, 30)
dat <- ret_data[-c(1,2,3), c(T, ret_data[1,]==1) ]
dat$date <- as.character(dat[,1])
dat[,1] <- NULL
min_crs <- ret_data[,-1]
min_crs <- min_crs[,order(min_crs[1,])]
min_crs <- min_crs[,1:28]
min_crs$date <- dat$date
res_max <- ret_result(dat, 31, 30)
res_min <- ret_result(min_crs, 31, 30)
min_crs$date <- dat$date
min_crs <- min_crs[-c(1,2,3),1:28]
min_crs$date <- dat$date
res_max <- ret_result(dat, 31, 30)
View(min_crs)
str(dat)
res_max <- ret_result(dat, 31, 30)
ret_result <- function(dat, indent, forc_step){
# dat - датафрейм с первым столбцом из дат и днемными доходностями
# indent - отступ от последней даты, зависит от максимального горизонта прогнозирования,
# который будет использоваться
# forc_step - сколько дней будем держать портфель
# Даты сохраняем в отдельный вектор
dates <- dat$date
dat$date <- NULL
# вместо пропусков пишем 0, потом меняем нули на 1
dat[is.na(dat)] <- 0
dat <- dat+1
# df_ret - результирующая таблица
df_ret <-data.frame(date=1, mean_return=1,stability_index=1)
for(i in 1 :(nrow(dat)-indent) ){
temp_row <- rep(1,ncol(dat))
for (k in 1:forc_step){
temp_row <- temp_row*as.numeric(dat[i+k,])
}
df_ret[i,1] <- dates[i]
df_ret[i,2] <-(mean(temp_row)-1)*100
df_ret[i,3] <-(mean(temp_row)-1)/mean(apply(dat[i:(i+forc_step),],2,sd))
}
return (df_ret)
}
res_max <- ret_result(dat, 31, 30)
res_min <- ret_result(min_crs, 31, 30)
View(res_max)
mean(res_min[,2])
mean(res_max[,2])
write.xlsx(res_max,
"max_crs.xls", sheetName="crs=1")
install.packages("xlsx")
write.xlsx(res_max,
"max_crs.xls", sheetName="crs=1")
library(xlsx)
library(xlsx)
install.packages("rJava")
library(xlsx)
write.csv(x = res_max, file ="crs_1.csv" )
write.csv(x = res_max, file ="crs_1.csv",quote = F )
write.csv(x = res_max, file ="crs_1.csv",quote= F, sep=";"  )
write.csv(x = res_max, file ="crs_1.csv",quote= F )
write.csv(x = res_max, file ="crs_1.csv",quote= F,row.names = F,sep = ";" )
write.csv(x = res_max, file ="crs_1.csv",quote= F,row.names = F,sep = ";" )
write.csv(x = res_min, file ="crs_the_worst.csv",quote= F,row.names = F,sep = ";" )
Sys.setenv(JAVA_HOME='c:\\Program Files (x86)\\Java\\jre7') # for 64-bit version
install.packages("rJava")
library(xlsx)
library(rJava)
